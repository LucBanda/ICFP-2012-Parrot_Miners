#!/usr/bin/env python
# -*- indent-tabs-mode: t -*-


import sys, os, signal, time
from model import LambdaMapState
from controler import controler, kcontroler, botcontroler, SimulatorDieEvent
from UCT import Node
import getopt

#if len(sys.argv) != 1 and len(sys.argv) != 3:
#	print "usage: ", sys.argv[0], " debug <map_file_map>"
#	print "       or ",sys.argv[0]," < <map_file_map>"
#	exit(1)

argv = sys.argv[1:]
try:
	opts, args = getopt.getopt(argv, "thdm:c:")
except getopt.GetoptError:
	print 'lifter [-h] [-d] [-t] -m map -c [kcontroller | botcontroller]'
	sys.exit(2)

debugAlgo = False

for opt, arg in opts:
	if opt == '-h':
		print 'lifer[-d] [-h] -m map -c [kcontroller | botcontroller]'
		print '-h : this help'
		print '-d : enable debug'
		print '-t : enable tracing display'
		print '-m map : the maps which resides in ./maps/'
		print '-c : the controller used :'
		print '\tkcontroller for keyboard tests'
		print '\tbotcontroller for bot use'
		sys.exit()
	elif opt == "-m":
		mapfile = open(arg)
	elif opt == "-c":
		controller = arg
	elif opt == "-d":
		Node.debug = True
	elif opt == "-t":
		debugAlgo = True


def reset_tty_and_exit():
	#termios.tcsetattr(fd, termios.TCSANOW, old_settings)
	SimulatorDieEvent.stop_that.set()
	#~ os.system("reset")
	time.sleep(1)
	sys.exit(0)

def reindex(lambda_map):
	height = len(lambda_map)
	width = len(lambda_map[0])
	
	lambda_indexed=[[ 'X' for i in range(height)] for i in range(width) ]
	for i in range(width):
		for j in range(height):
			lambda_indexed[i][j]=lambda_map[j][i]
			 # Filling beards list coordinates.
	return lambda_indexed


lambda_map = [[]]


with mapfile as m:
	water_value=0
	flooding_value=0
	waterproof_value=10
	growth=25
	razors=0
	trampolines = {}
	for line in m:
		if "Waterproof" in line: #Waterproof needs to stay before water
			words=line.split(" ")
			waterproof_value=int(words[1])
			continue
		elif "Water" in line:
			words=line.split(" ")
			water_value=int(words[1])
			continue
		elif "Flooding" in line:
			words=line.split(" ")
			flooding_value=int(words[1])
			continue
		elif "Trampoline" in line:
			words = line.split(" ")
			trampoline_name = words[1]
			target_number = int(words[3])
			trampolines[trampoline_name] = target_number
			continue
		elif "Razors" in line:
			words= line.split(" ")
			razors=int(words[1])
			continue
		elif "Growth" in line:
			words = line.split(" ")
			growth=int(words[1])
			continue
		if line.strip() == "":
			continue
		for c in line:
			if c == '\n':
				lambda_map.insert(0,[])
				continue
			lambda_map[0].append(c)



lambda_map.pop(0)

#padding with ' '
maxcol = max([len(lambda_map[i]) for i,v in enumerate(lambda_map)])
for i, val in enumerate(lambda_map):
	if len(lambda_map[i]) != maxcol:
		val.extend([' ' for padder in range(maxcol - len(val))])


lambda_map = reindex(lambda_map)

world = LambdaMapState(lambda_map) #, robotpos,lambdas,trampstuff,  waterstuff, beardstuff)

os.system("clear")
print world

#~ control = botcontroler(world)

# We set terminal in raw mode to catch single key events
# This allows stdin.read() to be unbuffered
# which means read(1) will return, even without any \n


if controller == "kcontroler":
	control = kcontroler(world)
	score = 0
	while 1:
		world.DoMove(control.get_next())
		score = world.GetResult()
		os.system("clear")
		print world
		if world.killed:
			print "lost"
			reset_tty_and_exit()
		elif world.win:
			print score
			reset_tty_and_exit()

if controller == "debugger":
	score = 0
	moves = ['R', 'R', 'R', 'R', 'R']
	i = 0
	while i < len(moves):
		world.DoMove(moves[i])
		i+=1
		score = world.GetResult()
		os.system("clear")
		print world
		if world.killed:
			print "lost"
		elif world.win:
			print score

if controller == "botcontroler":
	score = 0
	#signal.signal(signal.SIGINT, handlerResult)
	control = botcontroler(world, debugAlgo)
	explore_state = control.explore_step()
	print control.get_result()

