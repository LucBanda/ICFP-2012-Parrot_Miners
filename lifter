#!/usr/bin/env python
# -*- indent-tabs-mode: t -*-


import sys, termios, tty, os, signal, time
from displayer import MapDrawer
from mapupdater import controller

def reset_tty_and_exit():
	termios.tcsetattr(fd, termios.TCSANOW, old_settings)
	os.system("reset")
	sys.exit(0)

def handler(signum, frame):
	print 'Signal ', signum, 'catched'
	if signum == signal.SIGINT:
		print 'SIGINT, we exit !'
		cont.set_movement("A")
		time.sleep(2)
		reset_tty_and_exit()
	if signum == signal.SIGTERM:
		print 'SIGTERM, we exit as well, did we miss SIGINT ??'
		cont.set_movement("A")
		time.sleep(2)
		reset_tty_and_exit()

signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGTERM, handler)


lambda_map = [[]]

if len(sys.argv) == 1:
	print "usage: ", sys.argv[0], " <map_file_map>"
	exit(1)

with open(sys.argv[1]) as m:
	i=0
	for line in m:
		for c in line:
			if c == '\n':
				i+=1
				lambda_map.append([])
				continue
			lambda_map[i].append(c)

lambda_map.pop(i)

print "Map displayed by Displayer"
displayer=MapDrawer(lambda_map)
#Now lambda_map is "reindexed"
lambda_map=displayer.getmap()

displayer.draw()

cont = controller(lambda_map)

# We set terminal in raw mode to catch single key events
# This allows stdin.read() to be unbuffered
# which means read(1) will return, even without any \n

while 1:
	fd = sys.stdin.fileno()
	old_settings = termios.tcgetattr(fd)
	tty.setraw(fd)
	key = sys.stdin.read(1)
	termios.tcsetattr(fd, termios.TCSANOW, old_settings)
# in raw terminal mode CTRL+C is ASCII code 0x03
# We exit upon CTRL+C
	if key == ' ':
		termios.tcsetattr(fd, termios.TCSANOW, old_settings)
		os.system("reset")
		sys.exit(0)
	
	if key == "z":
		cont.set_movement("U")
	if key == "s":
		cont.set_movement("D")
	if key == "q":
		cont.set_movement("L")
	if key == "d":
		cont.set_movement("R")
	if key == "a":
		cont.set_movement("A")
	if key == "w":
		cont.set_movement("W")

	displayer.draw()
